rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Aurora sightings
    match /aurora_sightings/{sightingId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        // Allow updates to verification-related fields
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['verifications', 'confirmations', 'isVerified', 'lastUpdated', 'commentCount']) ||
        // Allow sighting owner to update user-editable fields
        (resource.data.userId == request.auth.uid && 
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['description', 'photoUrls', 'intensity']))
      );
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated() && 
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.sightingId == sightingId;
        allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      }
    }
    
    // User profiles
    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && (
        // Allow users to update their own profile
        request.auth.uid == userId ||
        // Allow updates to verification count and last active
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['verificationCount', 'lastActive', 'auroraSpottingCount'])
      );
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // User aurora photos
    match /user_aurora_photos/{photoId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Aurora alerts
    match /aurora_alerts/{alertId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
    
    // Verified bookings
    match /verified_bookings/{bookingId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }

    // Reports collection rules
    match /reports/{reportId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        // Allow admins to update report status
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']) ||
        // Allow reporters to update their own reports
        resource.data.userId == request.auth.uid
      );
      allow delete: if isAuthenticated() && (
        // Allow admins to delete reports
        request.auth.token.admin == true ||
        // Allow reporters to delete their own reports
        resource.data.userId == request.auth.uid
      );
    }
  }
} 